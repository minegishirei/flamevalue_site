test = {'body': 'こんにちは。RubyKaigi 2022に参加してきました。\n'
         '今年は久々のオフライン開催ということで、現地三重に行ってまいりました！\n'
         '現地の様子も合わせてレポートしていきたいと思います。\n'
         '\n'
         '\n'
         '![6D920E91-FABD-4271-A141-D2C3BA3060C0.jpeg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/6298fb48-bfe8-4d37-8b1e-8a58662124e3.jpeg)\n'
         '\n'
         '会場の三重県総合文化センター！(初日は生憎の雨だったため、こちらは2日目の写真になります)\n'
         '\n'
         '![A80385C4-3498-49C1-A258-2AEF8F3993D7.jpeg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/0880d93e-acc2-4a95-75aa-4ff60d7931b4.jpeg)\n'
         '\n'
         '近づいてみるとRubyKaigiの看板が…\n'
         '\n'
         '![ADB7A904-B193-4DD9-BA08-D5A5D188850E.jpeg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/39808af3-5ba2-4ee0-2714-eab856d7ea5c.jpeg)\n'
         '\n'
         'やってまいりました！\n'
         '![IMG_1390.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/75ed7d5b-8a20-bae6-239d-42eb5b9f743d.jpeg)\n'
         '\n'
         '## Day 1\n'
         '\n'
         '### Ruby meets WebAssembly\n'
         'https://rubykaigi.org/2022/presentations/kateinoigakukun.html#day1\n'
         '\n'
         '初回はWebAssemblyについて。\n'
         'Rubyの実行環境を用意するのが大変な人にも、WebAssemblyが使えれば、かんたんにRubyを試す環境が提供できる。\n'
         'デモンストレーションで実際にブラウザ上でRubyが動いたときは、会場から拍手が起きました:clap: \n'
         '\n'
         'Webブラウザ上で動作するときは、wasmはファイルシステムもネットワークもsystem時間もないので、一部の機能をJavaScript側にサポートされて動いている。\n'
         '一方で、WebAssembly自体はWEBブラウザだけのためのものでなく、他のプラットフォームでも利用される可能性がある…\n'
         'ということで、WASI(WebAssembly System '
         'Interface)という、どのプラットフォームにおいても利用できるようにすシステムインターフェースが必要となる。\n'
         'これらのサポートが3.2でされるようになる、というお話でした。\n'
         '自分の手元でも実際に動くことを確認できました、楽しい！\n'
         'https://irb-wasm.vercel.app/\n'
         '\n'
         '\n'
         '### Lunch Break\n'
         '\n'
         '![CB641924-A1EF-44F2-9150-FE142F4884E9.jpeg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/d2bad8ec-8af5-97d3-bdac-4622f257b1d1.jpeg)\n'
         '![8D70E773-49C9-49A6-A3A7-22E6BAB1B20A.jpeg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/8b026b88-17e3-8fee-5116-c9c8d94aab8f.jpeg)\n'
         '\n'
         '### Making *MaNy* threads on Ruby\n'
         'https://rubykaigi.org/2022/presentations/ko1.html#day1\n'
         '\n'
         '大量の並列スレッドを作るために、複数のネイティブスレッド（M)に対してRubyのスレッド（N)を作ることを目標とした`MaNy`プロジェクトのお話。\n'
         'Ruby1.8まではRubyのスレッドはすべて1つのネイティブスレッドに対してしか作成されず、CPUが仮に複数あったと場合でも、それを活用することができませんでした。（1:N)\n'
         'Ruby1.9以降は、複数のCPUが並列で活用できるようになりましたが、1:Nのときに比べてオーバーヘッドが大きくなりました。(1:1)\n'
         'これを、複数CPUが活用でき、なおかつ軽量で扱いしやすくするのがM:Nスレッド…という理解です。\n'
         '並列処理がかんたんにできるようになるのはすごく嬉しい。3.2は難しいかも？という話でしたが、今後が楽しみです。\n'
         '\n'
         '\n'
         '### Types teaches success, what will we do?\n'
         'https://rubykaigi.org/2022/presentations/fugakkbn.html#day1\n'
         '\n'
         '`gem_rbs_collection` '
         'という、gemのRBSファイルを管理するためのrepositoryの話と、それにどうcontributeしていくかを具体的な例をあげてのお話。\n'
         '存じていなかったのですが、gemではなく、このようにプロジェクトのsubmoduleとして使うものだそうです。\n'
         '\n'
         '```\n'
         '# Add new submodule inside your project\n'
         '$ git submodule add https://github.com/ruby/gem_rbs_collection.git '
         'vendor/rbs/gem_rbs_collection\n'
         '```\n'
         '\n'
         'https://github.com/ruby/gem_rbs_collection\n'
         '\n'
         '型のエコシステムが浸透するのにこのように一括で管理できる便利なツールがあると導入しやすそうと感じました。一方で、各gemに型が浸透した場合、今後役割が変わっていくこともありうるのかなというのが気になりました。\n'
         '\n'
         '### Tools for Providing rich user experience in debugger\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/ono-max.html#day1\n'
         '\n'
         'VSCodeの開発環境が充実していく一方で、そうでない人にもリッチなデバッガを提供したいというところからChrome/DevToolsをサポートしたデバッガを開発したお話。\n'
         'デモンストレーションではChrome上でデバッガが、JavaScriptでイメージするDevTools上のデバッガのように動いていて、途中までエディタを見ているのかと錯覚してしまいました…。\n'
         'また、VSCode上での実行も充実しており、実行ログを保存していて、ログのフィルタリングができたり、配列の値をビジュアライズしてみることができたり、機能がかなり充実していて、よい開発体験が得られそうでした。\n'
         '\n'
         '### Towards Ruby 4 JIT\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/k0kubun.html#day1\n'
         '\n'
         'JITのお話。英語だったので、あまり聞き取れた自信はないのですが…\n'
         'Ruby '
         '2.6で登場したMJITから、3.1で新しく導入されたYJITを取り入れ方、そしてRuby4では更に速度を改善してJavaやJavaScript相当にしていきたい…というお話だったと思っています。\n'
         '速度を体感したい！\n'
         '\n'
         '### TRICK 2022 Returns\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/tric.html\n'
         '\n'
         'TRICKとは`Transcendental Ruby Imbroglio Contest for '
         'rubyKaigi`の略とのことで、「現世利益はない」がすごいコードが次々と…\n'
         '技術力と発想力に驚き笑った1時間でした。\n'
         '\n'
         '## Day 2\n'
         '\n'
         '### Keynote\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/yukihiro_matz.html#day2\n'
         '\n'
         'MatzによるKeynote。\n'
         'RubyへできるContributionと、3.2の主な特徴について。\n'
         '今年も無事「Rubyは死んだ」を聞くことができました。\n'
         '\n'
         '### ruby/debug - The best investment for your productivity\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/_st0012.html#day2\n'
         '\n'
         'デバッグツール `ruby/debug` について。\n'
         '使い方はいくつかありますが、byebugやpryのように、`binding.break`という文言をソースコードに差し込むことでデバッグが可能です。 \n'
         'byebugの機能は一通り網羅していて、なおかつcolorizedされていたり、Backtraceで引数がチェックできる、リモートデバッグがしやすいなどの長所があります。\n'
         'Rubyのコアチームにメンテナンスされていて、一方でbyebugの開発頻度は現状高くないため、該当するバージョンを使えるなら、移行しない理由は今の所ないのかなと思いました。\n'
         '\n'
         '### Make RuboCop super fast\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/koic.html#day2\n'
         '\n'
         'Rubocop2に向けて、開発体験を向上させるための速度改善について。\n'
         '速度改善はいろんな方針があるが、Deamonizeが今回のメインで、これを行うとかなり早くなる。(850倍だったと思います)\n'
         'もととなっているのは `rubocop-daemon` という3rd party '
         'gemで、これが速い理由としては、Client/Server '
         'modelを採用していて、Serverの方でmoduleを読み込んでおくので、ロードを毎回する必要がない、ということのようです。\n'
         '`rubocop --server`でサーバが立ち上がるようになっていて、ただまだ期待していない動きをすることもあるので、 '
         'そういうときは`rubocop --server-restart` してねとのこと。\n'
         'とりあえず `rubocop --server` と `rubocop --server-restart`を覚えました。\n'
         '\n'
         '### Lunch Break\n'
         '\n'
         '![IMG_1433.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/a01fd716-0d2b-9cdc-b657-81db6b68ebe4.jpeg)\n'
         '\n'
         '\n'
         '### Method-based JIT compilation by transpiling to Julia\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/Kenta%20Murata.html#day2\n'
         '\n'
         'MJITやYJITを使っても速くならないケースがあり、それにどう対応していくかのお話。\n'
         'Pythonでも似たような問題を抱えており、NumbaというJITでの解決法が、2つのJIT mode（Object '
         'mode/nopython mode）のうち、nopython modeを採用するというもの。\n'
         '（きちんとした理解かわからないですが、動的言語故に何度も型を確認する必要があるところを、型をある程度固定して扱うことで、処理を早くしているという話かと理解しました）\n'
         'このNumbaに相当するものをRubyに採用し、なおかつ処理の速いJuliaに任せることで、高速化を図ります。\n'
         '実際の実行結果として、どの結果も数msかかっていたところが数μsになっていたため、かなり速くなっているようでした。\n'
         'ただ、配列は変換の際にオーバヘッドがあるのと、動的であるというRubyの特徴とどう付き合っていくかが今後の課題のようでした。\n'
         '\n'
         '\n'
         '### How fast really is Ruby 3.x?\n'
         'https://rubykaigi.org/2022/presentations/fujimotos.html#day2\n'
         '\n'
         'Ruby3ではRuby2より速度を3倍速くするというスローガン(Ruby3x3)があり、それが本当に達成されたのか？をアプリケーション側から検証するお話。\n'
         'アプリケーションはログ収集で有名なFluentdであり、また過去のバージョンはスナップショットとして取ってあるため、テスト環境としては十分。\n'
         'スループットを2.7と3.2で比較したところ、たしかに3倍になっているとのこと。\n'
         '一方で、他の言語と同様の処理をしたとき、どれが一番早いの？という話で、Python, Lua, '
         'Perlなどと比較したクイズが出題され、\n'
         'この話であればRubyもそこそこ速いのかな？という安易な予想をしてしまいましたが、期待を裏切ってRubyは3.2のYJITを利用した場合であっても他の言語より遅く、まだ他の言語と比べて速いとは言えないという結論でした。\n'
         '\n'
         '### Packet analysis with mruby on Wireshark - dRuby as example\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/coe401_.html#day2\n'
         '\n'
         'Wiresharkというネットワークパケットアナライザで、対象でないプロトコルの解析をするにはどうすれば？というところから、WiresharkのdessectorをRubyで作るお話。\n'
         'Wiresharkが公式にdessectorの環境として提供しているのはCとLuaのみであり、これをRubyで実装するために自分のための拡張Wiresharkを作られたとのこと。\n'
         'この回、実は現地では配信が途中で止まってしまうなどのトラブルに見舞われていたのですが、現地の方の機転で待機時間に質疑応答があったりと、最後までセッションを楽しむことができました。\n'
         '運営の方及び発表者の方、お疲れさまでした。\n'
         '\n'
         '### Create my own search engine\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/m_seki.html#day2\n'
         '\n'
         'ポケモンカードの類似デッキを表示するサイトで検索エンジンを作成する話。\n'
         'デッキの類似度と自然言語テキストは似ている、と考えたところから、自然言語処理と似た処理が適用できると考え、適用していくお話が面白かったです。\n'
         'あまりポケモンカードに詳しくないのですが、基本エネルギーカードが1つのデッキにいくつも入れられるせいで、類似度に強く影響しすぎてしまう…という特有の問題があるのを知り、ちょっと興味深かったです。\n'
         '\n'
         '### Ruby Committers vs The World\n'
         'https://rubykaigi.org/2022/presentations/rubylangorg.html#day2\n'
         '\n'
         'RubyのCommittersが一同に集まって壇上でディスカッションする貴重な場。一人ひとりの思い描くRubyの"future"が紹介されていました。\n'
         '\n'
         '## Day 3\n'
         '\n'
         '### error_highlight: user-friendly error diagnostics\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/mametter.html#day3\n'
         '\n'
         '3.1にあったerror_hightlightという機能がどのように改善されたのか？のお話。\n'
         '\n'
         '- カバーするエラークラスが広くなった\n'
         '- '
         'Exception#messageをoverwriteして複数行にしてしまうと発生する諸々の問題について対応するために、新しくException#detailed_messageを作成した\n'
         '- エラー箇所にフォーカスするための表示(`^^^^`となっている箇所)が本来のエラー箇所とずれてしまう問題\n'
         '\n'
         '実装はすぐ終わったのに解決に至るまでの論拠を探すところで1ヶ月かかったエスケープをやめる話が興味深かったです…。\n'
         '\n'
         '### RBS generation framework using Rack architecture\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/_ksss_.html#day3\n'
         '\n'
         '型をありふれた状態にするために、RBSの型ファイルを自動生成をしたい、というお話。\n'
         'コード実行時に解析すれば、正確な型を得ることができるため、RackのMiddlewareとしてその機能を作成すればうまくいきそうと考え、\n'
         'Rackのアーキテクチャを参考にし、Orthousesという自動生成ツールを作ったとのこと。\n'
         '細かくカスタムできるようで、今後の活用法が広がりそうだと思いました。\n'
         '\n'
         "### Let's collect type info during Ruby running and automaticall\n"
         '\n'
         'https://rubykaigi.org/2022/presentations/pink_bangbi.html#day3\n'
         '\n'
         '先程聞いたセッションと同じく、RBSの型ファイルの自動生成のお話。\n'
         'こちらも、静的解析ではなく、動的解析での自動生成で、`rbs-dynamic` というgemを入れて作成が可能とのこと。\n'
         'こちらはcliでRBSが作成できるようで、導入自体の難易度が低く、また動的解析ということで精度がより高いものが得られそうだと思いました。\n'
         '\n'
         '\n'
         '### Why is building the Ruby environment hard?\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/hsbt.html#day3\n'
         '\n'
         '"環境構築マニア"の方がこれまで出会った、周りの人が苦労しているビルドエラーの具体例についてのお話。\n'
         '\n'
         '- Ubuntu22.04でOpenSSL3.0のみ提供されるようになったことが起因してRubyの2.6のビルドができない\n'
         '- Ruby2.6や2.5のビルド時にfiddleでエラー\n'
         '- macOS13.0 (Ventura)でビルドができない\n'
         '- mysql2がビルドできない(mysql_configが見つからない)\n'
         '- mysql2がビルドできない(libsslとlibzstdでリンクエラー)\n'
         '\n'
         '想像していたよりかなり具体的な話で、特にmysql2のビルドエラーは私もよく遭遇するものでした。\n'
         '「ソフトウェアは何もしないと壊れる」\n'
         '\n'
         '\n'
         '### Lunch Break\n'
         '![IMG_1439.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/f8c3b422-e6f6-9e02-e0ef-33a3c51af462.jpeg)\n'
         '\n'
         '### The Better RuboCop World to enjoy Ruby\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/nay3.html#day3\n'
         '\n'
         'よりよくRuboCopを使っていこう、そのためにはどうしたら？という観点でのお話で、Rubyを利用している開発者としてかなり身近に感じました。\n'
         'RuboCopは開発者の状況に関わらず一貫してルールに反したものを違反とするので、デフォルトで利用していると、RuboCopの制約をかなり受けることになる。RuboCopでどのCopを適用するかを各組織で検討すると、その水準はだいぶマシになるものの、全てのCopを見直して決めていくことは各組織や開発者にとって、かなり負担になりうる…\n'
         'なので、Copに強制/参考に分けて、参考レベルには違反を出さないことで、これらの問題が解決されるのでは？という提案でした。\n'
         '個人的には、このルールを守るとどんな恩恵が受けられるか、どういう背景で生まれたものなのか、というCopを採用した理由が知りたいと思うことが多いです。それであれば、知らない人はただただ従うでなく参考になるし、仮に組織でどれを採用すべきかを検討する際にも話がしやすいと思っています。\n'
         '\n'
         '\n'
         '### Fast data processing with Ruby and Apache Arrow\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/ktou.html#day3\n'
         '\n'
         'Rubyのデータ処理は残念ながら速いとは言えず、その問題にどう対処していくか？を、Cross-language dev platform '
         'for dataとしてApache Arrowで解決していこうとする視点でのお話。\n'
         '\n'
         '### String Meets Encoding\n'
         '\n'
         'https://rubykaigi.org/2022/presentations/ima1zumi.html#day3\n'
         '\n'
         '前回のRubyKaigi Takeout '
         '2021セッション後に、twitterでとある機能を改善してほしいという声から、CSV.readの高速化を始めたお話。\n'
         'Stackprofでの計測から始まり、結果から推測してC実装へさらに深ぼっていく調査から、最終的に1.4倍の効果を得るに至ったまでの過程を詳しくお聞きすることができました。\n'
         '問題解決に至るプロセスが明快で、聞いていてとても楽しかったです。\n'
         '\n'
         '\n'
         '## 終わり\n'
         '\n'
         '今回私が聞いたセッションは以上でした。\n'
         'カンファレンス楽しいですね。問題解決に至るプロセスが聞けるのが楽しいし、一方で知らないことやわからないこと、忘れていることとても多いのですが、そういうのを振り返るきっかけにもなりました。\n'
         'また、オフラインで現地の空気を味わえたのもよかったです。近年の難しい時勢の中、オフライン開催まで漕ぎ着けた運営の方に感謝致します。\n'
         '\n'
         '全体的に型の話が印象的で、型を導入したけどまだ活用するに至っていないRuby開発者が多い中、どうやってもっとよい体験として型を提供できるか？に苦心されている印象でした。\n'
         'また、個人的な話ですが、この一年英語の勉強をしてきたつもりだったのに、英語のセッションを聞けるようになるという目標がほとんど達成できなかったことが反省点でした…。\n'
         'また来年に向けて精進していきたいと思います。\n'
         '\n'
         '\n'
         '\n'
         '\n'
         '\n'
         '\n'
         '\n',
 'coediting': False,
 'comments_count': 0,
 'created_at': '2022-09-14T15:34:19+09:00',
 'group': None,
 'id': '1edb43f06f0e149bd1b8',
 'likes_count': 0,
 'page_views_count': None,
 'private': False,
 'reactions_count': 0,
 'rendered_body': '<p data-sourcepos="1:1-3:78">こんにちは。RubyKaigi '
                  '2022に参加してきました。<br>\n'
                  '今年は久々のオフライン開催ということで、現地三重に行ってまいりました！<br>\n'
                  '現地の様子も合わせてレポートしていきたいと思います。</p>\n'
                  '<p data-sourcepos="6:1-6:154"><a '
                  'href="https://camo.qiitausercontent.com/a58e46e056bf1fe67e5420d6e2682c06acf57b60/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3535383831372f36323938666234382d626665382d346433372d386231652d3861353836363231323465332e6a706567" '
                  'target="_blank" rel="nofollow noopener"><img '
                  'src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2F6298fb48-bfe8-4d37-8b1e-8a58662124e3.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bb447cc08719e3a7ea0ed848c9ed50b3" '
                  'alt="6D920E91-FABD-4271-A141-D2C3BA3060C0.jpeg" '
                  'data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/6298fb48-bfe8-4d37-8b1e-8a58662124e3.jpeg" '
                  'srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2F6298fb48-bfe8-4d37-8b1e-8a58662124e3.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=67922e67683215b90ffc9ba65ce8c499 '
                  '1x" loading="lazy"></a></p>\n'
                  '<p '
                  'data-sourcepos="8:1-8:129">会場の三重県総合文化センター！(初日は生憎の雨だったため、こちらは2日目の写真になります)</p>\n'
                  '<p data-sourcepos="10:1-10:154"><a '
                  'href="https://camo.qiitausercontent.com/a1bbafeeeb64be203ed1ef8e24d9f7e498939d6c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3535383831372f30383830643933652d616363322d346139352d373561612d3466663630643739333162342e6a706567" '
                  'target="_blank" rel="nofollow noopener"><img '
                  'src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2F0880d93e-acc2-4a95-75aa-4ff60d7931b4.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a448be11a6da25907addcdca69b7d42a" '
                  'alt="A80385C4-3498-49C1-A258-2AEF8F3993D7.jpeg" '
                  'data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/0880d93e-acc2-4a95-75aa-4ff60d7931b4.jpeg" '
                  'srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2F0880d93e-acc2-4a95-75aa-4ff60d7931b4.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=97982915623f116869314f19e37039d4 '
                  '1x" loading="lazy"></a></p>\n'
                  '<p data-sourcepos="12:1-12:45">近づいてみるとRubyKaigiの看板が…</p>\n'
                  '<p data-sourcepos="14:1-14:154"><a '
                  'href="https://camo.qiitausercontent.com/172a3b09504fe0468127dc60691183d3f254ef1f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3535383831372f33393830386166332d356261322d346565302d323731342d6561623835366437656135632e6a706567" '
                  'target="_blank" rel="nofollow noopener"><img '
                  'src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2F39808af3-5ba2-4ee0-2714-eab856d7ea5c.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3efceb925fadad64c624a7f6446b458b" '
                  'alt="ADB7A904-B193-4DD9-BA08-D5A5D188850E.jpeg" '
                  'data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/39808af3-5ba2-4ee0-2714-eab856d7ea5c.jpeg" '
                  'srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2F39808af3-5ba2-4ee0-2714-eab856d7ea5c.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0c698621d8258c6df0a4e827b522af44 '
                  '1x" loading="lazy"></a></p>\n'
                  '<p data-sourcepos="16:1-17:125">やってまいりました！<br>\n'
                  '<a '
                  'href="https://camo.qiitausercontent.com/e78f07f5d73bf0b932902f1b03c772f2ea7e1071/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3535383831372f37356564376435622d386132302d626165362d323339642d3432656235623966373433642e6a706567" '
                  'target="_blank" rel="nofollow noopener"><img '
                  'src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2F75ed7d5b-8a20-bae6-239d-42eb5b9f743d.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7a3fa09053d6b29ebfcc431ea0441a26" '
                  'alt="IMG_1390.jpg" '
                  'data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/75ed7d5b-8a20-bae6-239d-42eb5b9f743d.jpeg" '
                  'srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2F75ed7d5b-8a20-bae6-239d-42eb5b9f743d.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c3d79873c93f626824efeeea3cf5806d '
                  '1x" loading="lazy"></a></p>\n'
                  '<h2 data-sourcepos="19:1-19:8">\n'
                  '<span id="day-1" class="fragment"></span><a '
                  'href="#day-1"><i class="fa fa-link"></i></a>Day 1</h2>\n'
                  '<h3 data-sourcepos="21:1-21:26">\n'
                  '<span id="ruby-meets-webassembly" '
                  'class="fragment"></span><a '
                  'href="#ruby-meets-webassembly"><i class="fa '
                  'fa-link"></i></a>Ruby meets WebAssembly</h3>\n'
                  '<p data-sourcepos="22:1-22:66"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/kateinoigakukun.html#day1"></qiita-embed-ogp></p>\n'
                  '<p data-sourcepos="24:1-26:131">初回はWebAssemblyについて。<br>\n'
                  'Rubyの実行環境を用意するのが大変な人にも、WebAssemblyが使えれば、かんたんにRubyを試す環境が提供できる。<br>\n'
                  'デモンストレーションで実際にブラウザ上でRubyが動いたときは、会場から拍手が起きました<img '
                  'alt=":clap:" class="emoji" height="20" '
                  'src="https://cdn.qiita.com/emoji/twemoji/unicode/1f44f.png" '
                  'title=":clap:" width="20" loading="lazy"></p>\n'
                  '<p '
                  'data-sourcepos="28:1-33:28">Webブラウザ上で動作するときは、wasmはファイルシステムもネットワークもsystem時間もないので、一部の機能をJavaScript側にサポートされて動いている。<br>\n'
                  '一方で、WebAssembly自体はWEBブラウザだけのためのものでなく、他のプラットフォームでも利用される可能性がある…<br>\n'
                  'ということで、WASI(WebAssembly System '
                  'Interface)という、どのプラットフォームにおいても利用できるようにすシステムインターフェースが必要となる。<br>\n'
                  'これらのサポートが3.2でされるようになる、というお話でした。<br>\n'
                  '自分の手元でも実際に動くことを確認できました、楽しい！<br>\n'
                  '<a href="https://irb-wasm.vercel.app/" class="autolink" '
                  'rel="nofollow noopener" '
                  'target="_blank">https://irb-wasm.vercel.app/</a></p>\n'
                  '<h3 data-sourcepos="36:1-36:15">\n'
                  '<span id="lunch-break" class="fragment"></span><a '
                  'href="#lunch-break"><i class="fa fa-link"></i></a>Lunch '
                  'Break</h3>\n'
                  '<p data-sourcepos="38:1-39:154"><a '
                  'href="https://camo.qiitausercontent.com/412347e7cddf3da9ca267e76dfda92522c8da4c7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3535383831372f64326261643865632d386166352d393764332d626461632d3436323266323537623164312e6a706567" '
                  'target="_blank" rel="nofollow noopener"><img '
                  'src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2Fd2bad8ec-8af5-97d3-bdac-4622f257b1d1.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2a7991b95f3249e7067b8a2efa1d98e7" '
                  'alt="CB641924-A1EF-44F2-9150-FE142F4884E9.jpeg" '
                  'data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/d2bad8ec-8af5-97d3-bdac-4622f257b1d1.jpeg" '
                  'srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2Fd2bad8ec-8af5-97d3-bdac-4622f257b1d1.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0af31147bb69899f568c370357dd1958 '
                  '1x" loading="lazy"></a><br>\n'
                  '<a '
                  'href="https://camo.qiitausercontent.com/039f26e91859aaea84de30e1e71f8951df8aeeed/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3535383831372f38623032366238382d313765332d386665652d353131362d6339633864393461616238662e6a706567" '
                  'target="_blank" rel="nofollow noopener"><img '
                  'src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2F8b026b88-17e3-8fee-5116-c9c8d94aab8f.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=78f8f9affca0d002450899a017d6829f" '
                  'alt="8D70E773-49C9-49A6-A3A7-22E6BAB1B20A.jpeg" '
                  'data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/8b026b88-17e3-8fee-5116-c9c8d94aab8f.jpeg" '
                  'srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2F8b026b88-17e3-8fee-5116-c9c8d94aab8f.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=35b96dcf5d3672db37ea0a766f6fd7d6 '
                  '1x" loading="lazy"></a></p>\n'
                  '<h3 data-sourcepos="41:1-41:33">\n'
                  '<span id="making-many-threads-on-ruby" '
                  'class="fragment"></span><a '
                  'href="#making-many-threads-on-ruby"><i class="fa '
                  'fa-link"></i></a>Making <em>MaNy</em> threads on Ruby</h3>\n'
                  '<p data-sourcepos="42:1-42:54"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/ko1.html#day1"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="44:1-48:159">大量の並列スレッドを作るために、複数のネイティブスレッド（M)に対してRubyのスレッド（N)を作ることを目標とした<code>MaNy</code>プロジェクトのお話。<br>\n'
                  'Ruby1.8まではRubyのスレッドはすべて1つのネイティブスレッドに対してしか作成されず、CPUが仮に複数あったと場合でも、それを活用することができませんでした。（1:N)<br>\n'
                  'Ruby1.9以降は、複数のCPUが並列で活用できるようになりましたが、1:Nのときに比べてオーバーヘッドが大きくなりました。(1:1)<br>\n'
                  'これを、複数CPUが活用でき、なおかつ軽量で扱いしやすくするのがM:Nスレッド…という理解です。<br>\n'
                  '並列処理がかんたんにできるようになるのはすごく嬉しい。3.2は難しいかも？という話でしたが、今後が楽しみです。</p>\n'
                  '<h3 data-sourcepos="51:1-51:43">\n'
                  '<span id="types-teaches-success-what-will-we-do" '
                  'class="fragment"></span><a '
                  'href="#types-teaches-success-what-will-we-do"><i class="fa '
                  'fa-link"></i></a>Types teaches success, what will we '
                  'do?</h3>\n'
                  '<p data-sourcepos="52:1-52:59"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/fugakkbn.html#day1"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="54:1-55:141"><code>gem_rbs_collection</code> '
                  'という、gemのRBSファイルを管理するためのrepositoryの話と、それにどうcontributeしていくかを具体的な例をあげてのお話。<br>\n'
                  '存じていなかったのですが、gemではなく、このようにプロジェクトのsubmoduleとして使うものだそうです。</p>\n'
                  '<div class="code-frame" data-lang="text" '
                  'data-sourcepos="57:1-60:3"><div '
                  'class="highlight"><pre><code># Add new submodule inside '
                  'your project\n'
                  '$ git submodule add '
                  'https://github.com/ruby/gem_rbs_collection.git '
                  'vendor/rbs/gem_rbs_collection\n'
                  '</code></pre></div></div>\n'
                  '<p data-sourcepos="62:1-62:42"><qiita-embed-ogp '
                  'src="https://github.com/ruby/gem_rbs_collection"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="64:1-64:306">型のエコシステムが浸透するのにこのように一括で管理できる便利なツールがあると導入しやすそうと感じました。一方で、各gemに型が浸透した場合、今後役割が変わっていくこともありうるのかなというのが気になりました。</p>\n'
                  '<h3 data-sourcepos="66:1-66:56">\n'
                  '<span '
                  'id="tools-for-providing-rich-user-experience-in-debugger" '
                  'class="fragment"></span><a '
                  'href="#tools-for-providing-rich-user-experience-in-debugger"><i '
                  'class="fa fa-link"></i></a>Tools for Providing rich user '
                  'experience in debugger</h3>\n'
                  '<p data-sourcepos="68:1-68:58"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/ono-max.html#day1"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="70:1-72:297">VSCodeの開発環境が充実していく一方で、そうでない人にもリッチなデバッガを提供したいというところからChrome/DevToolsをサポートしたデバッガを開発したお話。<br>\n'
                  'デモンストレーションではChrome上でデバッガが、JavaScriptでイメージするDevTools上のデバッガのように動いていて、途中までエディタを見ているのかと錯覚してしまいました…。<br>\n'
                  'また、VSCode上での実行も充実しており、実行ログを保存していて、ログのフィルタリングができたり、配列の値をビジュアライズしてみることができたり、機能がかなり充実していて、よい開発体験が得られそうでした。</p>\n'
                  '<h3 data-sourcepos="74:1-74:22">\n'
                  '<span id="towards-ruby-4-jit" class="fragment"></span><a '
                  'href="#towards-ruby-4-jit"><i class="fa '
                  'fa-link"></i></a>Towards Ruby 4 JIT</h3>\n'
                  '<p data-sourcepos="76:1-76:58"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/k0kubun.html#day1"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="78:1-80:27">JITのお話。英語だったので、あまり聞き取れた自信はないのですが…<br>\n'
                  'Ruby '
                  '2.6で登場したMJITから、3.1で新しく導入されたYJITを取り入れ方、そしてRuby4では更に速度を改善してJavaやJavaScript相当にしていきたい…というお話だったと思っています。<br>\n'
                  '速度を体感したい！</p>\n'
                  '<h3 data-sourcepos="82:1-82:22">\n'
                  '<span id="trick-2022-returns" class="fragment"></span><a '
                  'href="#trick-2022-returns"><i class="fa '
                  'fa-link"></i></a>TRICK 2022 Returns</h3>\n'
                  '<p data-sourcepos="84:1-84:50"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/tric.html"></qiita-embed-ogp></p>\n'
                  '<p data-sourcepos="86:1-87:58">TRICKとは<code>Transcendental '
                  'Ruby Imbroglio Contest for '
                  'rubyKaigi</code>の略とのことで、「現世利益はない」がすごいコードが次々と…<br>\n'
                  '技術力と発想力に驚き笑った1時間でした。</p>\n'
                  '<h2 data-sourcepos="89:1-89:8">\n'
                  '<span id="day-2" class="fragment"></span><a '
                  'href="#day-2"><i class="fa fa-link"></i></a>Day 2</h2>\n'
                  '<h3 data-sourcepos="91:1-91:11">\n'
                  '<span id="keynote" class="fragment"></span><a '
                  'href="#keynote"><i class="fa fa-link"></i></a>Keynote</h3>\n'
                  '<p data-sourcepos="93:1-93:64"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/yukihiro_matz.html#day2"></qiita-embed-ogp></p>\n'
                  '<p data-sourcepos="95:1-97:73">MatzによるKeynote。<br>\n'
                  'RubyへできるContributionと、3.2の主な特徴について。<br>\n'
                  '今年も無事「Rubyは死んだ」を聞くことができました。</p>\n'
                  '<h3 data-sourcepos="99:1-99:58">\n'
                  '<span '
                  'id="rubydebug---the-best-investment-for-your-productivity" '
                  'class="fragment"></span><a '
                  'href="#rubydebug---the-best-investment-for-your-productivity"><i '
                  'class="fa fa-link"></i></a>ruby/debug - The best investment '
                  'for your productivity</h3>\n'
                  '<p data-sourcepos="101:1-101:58"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/_st0012.html#day2"></qiita-embed-ogp></p>\n'
                  '<p data-sourcepos="103:1-106:238">デバッグツール '
                  '<code>ruby/debug</code> について。<br>\n'
                  '使い方はいくつかありますが、byebugやpryのように、<code>binding.break</code>という文言をソースコードに差し込むことでデバッグが可能です。<br>\n'
                  'byebugの機能は一通り網羅していて、なおかつcolorizedされていたり、Backtraceで引数がチェックできる、リモートデバッグがしやすいなどの長所があります。<br>\n'
                  'Rubyのコアチームにメンテナンスされていて、一方でbyebugの開発頻度は現状高くないため、該当するバージョンを使えるなら、移行しない理由は今の所ないのかなと思いました。</p>\n'
                  '<h3 data-sourcepos="108:1-108:27">\n'
                  '<span id="make-rubocop-super-fast" '
                  'class="fragment"></span><a '
                  'href="#make-rubocop-super-fast"><i class="fa '
                  'fa-link"></i></a>Make RuboCop super fast</h3>\n'
                  '<p data-sourcepos="110:1-110:55"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/koic.html#day2"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="112:1-116:86">Rubocop2に向けて、開発体験を向上させるための速度改善について。<br>\n'
                  '速度改善はいろんな方針があるが、Deamonizeが今回のメインで、これを行うとかなり早くなる。(850倍だったと思います)<br>\n'
                  'もととなっているのは <code>rubocop-daemon</code> という3rd party '
                  'gemで、これが速い理由としては、Client/Server '
                  'modelを採用していて、Serverの方でmoduleを読み込んでおくので、ロードを毎回する必要がない、ということのようです。<br>\n'
                  '<code>rubocop '
                  '--server</code>でサーバが立ち上がるようになっていて、ただまだ期待していない動きをすることもあるので、 '
                  'そういうときは<code>rubocop --server-restart</code> してねとのこと。<br>\n'
                  'とりあえず <code>rubocop --server</code> と <code>rubocop '
                  '--server-restart</code>を覚えました。</p>\n'
                  '<h3 data-sourcepos="118:1-118:15">\n'
                  '<span id="lunch-break-1" class="fragment"></span><a '
                  'href="#lunch-break-1"><i class="fa fa-link"></i></a>Lunch '
                  'Break</h3>\n'
                  '<p data-sourcepos="120:1-120:125"><a '
                  'href="https://camo.qiitausercontent.com/55536511393f06dd96af6f95fe70613e3aaa5f5c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3535383831372f61303166643731362d306432622d396364632d623635372d3831646236623638656265342e6a706567" '
                  'target="_blank" rel="nofollow noopener"><img '
                  'src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2Fa01fd716-0d2b-9cdc-b657-81db6b68ebe4.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4b5ecb43e1ce0b7eef5083aceb1b4b88" '
                  'alt="IMG_1433.jpg" '
                  'data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/a01fd716-0d2b-9cdc-b657-81db6b68ebe4.jpeg" '
                  'srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2Fa01fd716-0d2b-9cdc-b657-81db6b68ebe4.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=09f64247008bc1b70167b5aadffd3fb7 '
                  '1x" loading="lazy"></a></p>\n'
                  '<h3 data-sourcepos="123:1-123:56">\n'
                  '<span '
                  'id="method-based-jit-compilation-by-transpiling-to-julia" '
                  'class="fragment"></span><a '
                  'href="#method-based-jit-compilation-by-transpiling-to-julia"><i '
                  'class="fa fa-link"></i></a>Method-based JIT compilation by '
                  'transpiling to Julia</h3>\n'
                  '<p data-sourcepos="125:1-125:65"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/Kenta%20Murata.html#day2"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="127:1-132:178">MJITやYJITを使っても速くならないケースがあり、それにどう対応していくかのお話。<br>\n'
                  'Pythonでも似たような問題を抱えており、NumbaというJITでの解決法が、2つのJIT mode（Object '
                  'mode/nopython mode）のうち、nopython modeを採用するというもの。<br>\n'
                  '（きちんとした理解かわからないですが、動的言語故に何度も型を確認する必要があるところを、型をある程度固定して扱うことで、処理を早くしているという話かと理解しました）<br>\n'
                  'このNumbaに相当するものをRubyに採用し、なおかつ処理の速いJuliaに任せることで、高速化を図ります。<br>\n'
                  '実際の実行結果として、どの結果も数msかかっていたところが数μsになっていたため、かなり速くなっているようでした。<br>\n'
                  'ただ、配列は変換の際にオーバヘッドがあるのと、動的であるというRubyの特徴とどう付き合っていくかが今後の課題のようでした。</p>\n'
                  '<h3 data-sourcepos="135:1-135:32">\n'
                  '<span id="how-fast-really-is-ruby-3x" '
                  'class="fragment"></span><a '
                  'href="#how-fast-really-is-ruby-3x"><i class="fa '
                  'fa-link"></i></a>How fast really is Ruby 3.x?</h3>\n'
                  '<p data-sourcepos="136:1-136:60"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/fujimotos.html#day2"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="138:1-142:297">Ruby3ではRuby2より速度を3倍速くするというスローガン(Ruby3x3)があり、それが本当に達成されたのか？をアプリケーション側から検証するお話。<br>\n'
                  'アプリケーションはログ収集で有名なFluentdであり、また過去のバージョンはスナップショットとして取ってあるため、テスト環境としては十分。<br>\n'
                  'スループットを2.7と3.2で比較したところ、たしかに3倍になっているとのこと。<br>\n'
                  '一方で、他の言語と同様の処理をしたとき、どれが一番早いの？という話で、Python, Lua, '
                  'Perlなどと比較したクイズが出題され、<br>\n'
                  'この話であればRubyもそこそこ速いのかな？という安易な予想をしてしまいましたが、期待を裏切ってRubyは3.2のYJITを利用した場合であっても他の言語より遅く、まだ他の言語と比べて速いとは言えないという結論でした。</p>\n'
                  '<h3 data-sourcepos="144:1-144:62">\n'
                  '<span '
                  'id="packet-analysis-with-mruby-on-wireshark---druby-as-example" '
                  'class="fragment"></span><a '
                  'href="#packet-analysis-with-mruby-on-wireshark---druby-as-example"><i '
                  'class="fa fa-link"></i></a>Packet analysis with mruby on '
                  'Wireshark - dRuby as example</h3>\n'
                  '<p data-sourcepos="146:1-146:58"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/coe401_.html#day2"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="148:1-151:63">Wiresharkというネットワークパケットアナライザで、対象でないプロトコルの解析をするにはどうすれば？というところから、WiresharkのdessectorをRubyで作るお話。<br>\n'
                  'Wiresharkが公式にdessectorの環境として提供しているのはCとLuaのみであり、これをRubyで実装するために自分のための拡張Wiresharkを作られたとのこと。<br>\n'
                  'この回、実は現地では配信が途中で止まってしまうなどのトラブルに見舞われていたのですが、現地の方の機転で待機時間に質疑応答があったりと、最後までセッションを楽しむことができました。<br>\n'
                  '運営の方及び発表者の方、お疲れさまでした。</p>\n'
                  '<h3 data-sourcepos="153:1-153:31">\n'
                  '<span id="create-my-own-search-engine" '
                  'class="fragment"></span><a '
                  'href="#create-my-own-search-engine"><i class="fa '
                  'fa-link"></i></a>Create my own search engine</h3>\n'
                  '<p data-sourcepos="155:1-155:57"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/m_seki.html#day2"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="157:1-159:289">ポケモンカードの類似デッキを表示するサイトで検索エンジンを作成する話。<br>\n'
                  'デッキの類似度と自然言語テキストは似ている、と考えたところから、自然言語処理と似た処理が適用できると考え、適用していくお話が面白かったです。<br>\n'
                  'あまりポケモンカードに詳しくないのですが、基本エネルギーカードが1つのデッキにいくつも入れられるせいで、類似度に強く影響しすぎてしまう…という特有の問題があるのを知り、ちょっと興味深かったです。</p>\n'
                  '<h3 data-sourcepos="161:1-161:32">\n'
                  '<span id="ruby-committers-vs-the-world" '
                  'class="fragment"></span><a '
                  'href="#ruby-committers-vs-the-world"><i class="fa '
                  'fa-link"></i></a>Ruby Committers vs The World</h3>\n'
                  '<p data-sourcepos="162:1-162:62"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/rubylangorg.html#day2"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="164:1-164:173">RubyのCommittersが一同に集まって壇上でディスカッションする貴重な場。一人ひとりの思い描くRubyの"future"が紹介されていました。</p>\n'
                  '<h2 data-sourcepos="166:1-166:8">\n'
                  '<span id="day-3" class="fragment"></span><a '
                  'href="#day-3"><i class="fa fa-link"></i></a>Day 3</h2>\n'
                  '<h3 data-sourcepos="168:1-168:52">\n'
                  '<span id="error_highlight-user-friendly-error-diagnostics" '
                  'class="fragment"></span><a '
                  'href="#error_highlight-user-friendly-error-diagnostics"><i '
                  'class="fa fa-link"></i></a>error_highlight: user-friendly '
                  'error diagnostics</h3>\n'
                  '<p data-sourcepos="170:1-170:59"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/mametter.html#day3"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="172:1-172:100">3.1にあったerror_hightlightという機能がどのように改善されたのか？のお話。</p>\n'
                  '<ul data-sourcepos="174:1-177:0">\n'
                  '<li data-sourcepos="174:1-174:53">カバーするエラークラスが広くなった</li>\n'
                  '<li '
                  'data-sourcepos="175:1-175:180">Exception#messageをoverwriteして複数行にしてしまうと発生する諸々の問題について対応するために、新しくException#detailed_messageを作成した</li>\n'
                  '<li '
                  'data-sourcepos="176:1-177:0">エラー箇所にフォーカスするための表示(<code>^^^^</code>となっている箇所)が本来のエラー箇所とずれてしまう問題</li>\n'
                  '</ul>\n'
                  '<p '
                  'data-sourcepos="178:1-178:166">実装はすぐ終わったのに解決に至るまでの論拠を探すところで1ヶ月かかったエスケープをやめる話が興味深かったです…。</p>\n'
                  '<h3 data-sourcepos="180:1-180:52">\n'
                  '<span id="rbs-generation-framework-using-rack-architecture" '
                  'class="fragment"></span><a '
                  'href="#rbs-generation-framework-using-rack-architecture"><i '
                  'class="fa fa-link"></i></a>RBS generation framework using '
                  'Rack architecture</h3>\n'
                  '<p data-sourcepos="182:1-182:57"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/_ksss_.html#day3"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="184:1-187:102">型をありふれた状態にするために、RBSの型ファイルを自動生成をしたい、というお話。<br>\n'
                  'コード実行時に解析すれば、正確な型を得ることができるため、RackのMiddlewareとしてその機能を作成すればうまくいきそうと考え、<br>\n'
                  'Rackのアーキテクチャを参考にし、Orthousesという自動生成ツールを作ったとのこと。<br>\n'
                  '細かくカスタムできるようで、今後の活用法が広がりそうだと思いました。</p>\n'
                  '<h3 data-sourcepos="189:1-189:64">\n'
                  '<span '
                  'id="lets-collect-type-info-during-ruby-running-and-automaticall" '
                  'class="fragment"></span><a '
                  'href="#lets-collect-type-info-during-ruby-running-and-automaticall"><i '
                  'class="fa fa-link"></i></a>Let\'s collect type info during '
                  'Ruby running and automaticall</h3>\n'
                  '<p data-sourcepos="191:1-191:62"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/pink_bangbi.html#day3"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="193:1-195:192">先程聞いたセッションと同じく、RBSの型ファイルの自動生成のお話。<br>\n'
                  'こちらも、静的解析ではなく、動的解析での自動生成で、<code>rbs-dynamic</code> '
                  'というgemを入れて作成が可能とのこと。<br>\n'
                  'こちらはcliでRBSが作成できるようで、導入自体の難易度が低く、また動的解析ということで精度がより高いものが得られそうだと思いました。</p>\n'
                  '<h3 data-sourcepos="198:1-198:46">\n'
                  '<span id="why-is-building-the-ruby-environment-hard" '
                  'class="fragment"></span><a '
                  'href="#why-is-building-the-ruby-environment-hard"><i '
                  'class="fa fa-link"></i></a>Why is building the Ruby '
                  'environment hard?</h3>\n'
                  '<p data-sourcepos="200:1-200:55"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/hsbt.html#day3"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="202:1-202:146">"環境構築マニア"の方がこれまで出会った、周りの人が苦労しているビルドエラーの具体例についてのお話。</p>\n'
                  '<ul data-sourcepos="204:1-209:0">\n'
                  '<li '
                  'data-sourcepos="204:1-204:123">Ubuntu22.04でOpenSSL3.0のみ提供されるようになったことが起因してRubyの2.6のビルドができない</li>\n'
                  '<li '
                  'data-sourcepos="205:1-205:51">Ruby2.6や2.5のビルド時にfiddleでエラー</li>\n'
                  '<li data-sourcepos="206:1-206:48">macOS13.0 '
                  '(Ventura)でビルドができない</li>\n'
                  '<li '
                  'data-sourcepos="207:1-207:67">mysql2がビルドできない(mysql_configが見つからない)</li>\n'
                  '<li '
                  'data-sourcepos="208:1-209:0">mysql2がビルドできない(libsslとlibzstdでリンクエラー)</li>\n'
                  '</ul>\n'
                  '<p '
                  'data-sourcepos="210:1-211:54">想像していたよりかなり具体的な話で、特にmysql2のビルドエラーは私もよく遭遇するものでした。<br>\n'
                  '「ソフトウェアは何もしないと壊れる」</p>\n'
                  '<h3 data-sourcepos="214:1-214:15">\n'
                  '<span id="lunch-break-2" class="fragment"></span><a '
                  'href="#lunch-break-2"><i class="fa fa-link"></i></a>Lunch '
                  'Break</h3>\n'
                  '<p data-sourcepos="215:1-215:125"><a '
                  'href="https://camo.qiitausercontent.com/4781661cc7ab24905f52b7721f24ba6aa2449852/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3535383831372f66386333623432322d653666362d396530322d653065662d3333613363353161663436322e6a706567" '
                  'target="_blank" rel="nofollow noopener"><img '
                  'src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2Ff8c3b422-e6f6-9e02-e0ef-33a3c51af462.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=64fe39225be7b62c23b34074c9f8b944" '
                  'alt="IMG_1439.jpg" '
                  'data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558817/f8c3b422-e6f6-9e02-e0ef-33a3c51af462.jpeg" '
                  'srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F558817%2Ff8c3b422-e6f6-9e02-e0ef-33a3c51af462.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2a2238028df7d7dc6923cf138beab6a3 '
                  '1x" loading="lazy"></a></p>\n'
                  '<h3 data-sourcepos="217:1-217:42">\n'
                  '<span id="the-better-rubocop-world-to-enjoy-ruby" '
                  'class="fragment"></span><a '
                  'href="#the-better-rubocop-world-to-enjoy-ruby"><i class="fa '
                  'fa-link"></i></a>The Better RuboCop World to enjoy '
                  'Ruby</h3>\n'
                  '<p data-sourcepos="219:1-219:55"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/nay3.html#day3"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="221:1-224:411">よりよくRuboCopを使っていこう、そのためにはどうしたら？という観点でのお話で、Rubyを利用している開発者としてかなり身近に感じました。<br>\n'
                  'RuboCopは開発者の状況に関わらず一貫してルールに反したものを違反とするので、デフォルトで利用していると、RuboCopの制約をかなり受けることになる。RuboCopでどのCopを適用するかを各組織で検討すると、その水準はだいぶマシになるものの、全てのCopを見直して決めていくことは各組織や開発者にとって、かなり負担になりうる…<br>\n'
                  'なので、Copに強制/参考に分けて、参考レベルには違反を出さないことで、これらの問題が解決されるのでは？という提案でした。<br>\n'
                  '個人的には、このルールを守るとどんな恩恵が受けられるか、どういう背景で生まれたものなのか、というCopを採用した理由が知りたいと思うことが多いです。それであれば、知らない人はただただ従うでなく参考になるし、仮に組織でどれを採用すべきかを検討する際にも話がしやすいと思っています。</p>\n'
                  '<h3 data-sourcepos="227:1-227:51">\n'
                  '<span id="fast-data-processing-with-ruby-and-apache-arrow" '
                  'class="fragment"></span><a '
                  'href="#fast-data-processing-with-ruby-and-apache-arrow"><i '
                  'class="fa fa-link"></i></a>Fast data processing with Ruby '
                  'and Apache Arrow</h3>\n'
                  '<p data-sourcepos="229:1-229:55"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/ktou.html#day3"></qiita-embed-ogp></p>\n'
                  '<p '
                  'data-sourcepos="231:1-231:226">Rubyのデータ処理は残念ながら速いとは言えず、その問題にどう対処していくか？を、Cross-language '
                  'dev platform for dataとしてApache Arrowで解決していこうとする視点でのお話。</p>\n'
                  '<h3 data-sourcepos="233:1-233:25">\n'
                  '<span id="string-meets-encoding" class="fragment"></span><a '
                  'href="#string-meets-encoding"><i class="fa '
                  'fa-link"></i></a>String Meets Encoding</h3>\n'
                  '<p data-sourcepos="235:1-235:59"><qiita-embed-ogp '
                  'src="https://rubykaigi.org/2022/presentations/ima1zumi.html#day3"></qiita-embed-ogp></p>\n'
                  '<p data-sourcepos="237:1-239:96">前回のRubyKaigi Takeout '
                  '2021セッション後に、twitterでとある機能を改善してほしいという声から、CSV.readの高速化を始めたお話。<br>\n'
                  'Stackprofでの計測から始まり、結果から推測してC実装へさらに深ぼっていく調査から、最終的に1.4倍の効果を得るに至ったまでの過程を詳しくお聞きすることができました。<br>\n'
                  '問題解決に至るプロセスが明快で、聞いていてとても楽しかったです。</p>\n'
                  '<h2 data-sourcepos="242:1-242:12">\n'
                  '<span id="終わり" class="fragment"></span><a '
                  'href="#%E7%B5%82%E3%82%8F%E3%82%8A"><i class="fa '
                  'fa-link"></i></a>終わり</h2>\n'
                  '<p data-sourcepos="244:1-246:195">今回私が聞いたセッションは以上でした。<br>\n'
                  'カンファレンス楽しいですね。問題解決に至るプロセスが聞けるのが楽しいし、一方で知らないことやわからないこと、忘れていることとても多いのですが、そういうのを振り返るきっかけにもなりました。<br>\n'
                  'また、オフラインで現地の空気を味わえたのもよかったです。近年の難しい時勢の中、オフライン開催まで漕ぎ着けた運営の方に感謝致します。</p>\n'
                  '<p '
                  'data-sourcepos="248:1-250:66">全体的に型の話が印象的で、型を導入したけどまだ活用するに至っていないRuby開発者が多い中、どうやってもっとよい体験として型を提供できるか？に苦心されている印象でした。<br>\n'
                  'また、個人的な話ですが、この一年英語の勉強をしてきたつもりだったのに、英語のセッションを聞けるようになるという目標がほとんど達成できなかったことが反省点でした…。<br>\n'
                  'また来年に向けて精進していきたいと思います。</p>\n',
 'tags': [{'name': 'Ruby', 'versions': []}],
 'team_membership': None,
 'title': 'RubyKaigi 2022参加レポート',
 'updated_at': '2022-09-14T15:34:19+09:00',
 'url': 'https://qiita.com/tana2034/items/1edb43f06f0e149bd1b8',
 'user': {'description': None,
          'facebook_id': None,
          'followees_count': 0,
          'followers_count': 0,
          'github_login_name': 'tana2034',
          'id': 'tana2034',
          'items_count': 3,
          'linkedin_id': None,
          'location': None,
          'name': '',
          'organization': None,
          'permanent_id': 558817,
          'profile_image_url': 'https://avatars3.githubusercontent.com/u/33181485?v=4',
          'team_only': False,
          'twitter_screen_name': None,
          'website_url': None}}


def get_Qiita_mock():
        pass